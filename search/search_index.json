{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"git_installation/","text":"Installation, setup & getting help check if installed in terminal/command-line by git --version official source you can go with the Git Credential Manager Core option register a Github account set up your Git using git config name: git config --global user.name \"<your name>\" email: git config --global user.email <your email> text editor: git config --global core.editor \"code --wait\" (for VS code) diff tool: git config --global merge.tool vimdiff don't worry about the diff tool, we will talk about it later configuration variables stored in 3 different places: /etc/gitconfig file - values for every user on the system and all repositories git config --system ~/.gitconfig file - specific to the user git config --global .git/config in the specific repository each level overrides values in the previous level check your settings using git config --list or git config <specific key> to get help even offline use git help <verb> or git <verb> --help e.g. git help config","title":"Git installation"},{"location":"git_installation/#installation-setup-getting-help","text":"check if installed in terminal/command-line by git --version official source you can go with the Git Credential Manager Core option register a Github account set up your Git using git config name: git config --global user.name \"<your name>\" email: git config --global user.email <your email> text editor: git config --global core.editor \"code --wait\" (for VS code) diff tool: git config --global merge.tool vimdiff don't worry about the diff tool, we will talk about it later configuration variables stored in 3 different places: /etc/gitconfig file - values for every user on the system and all repositories git config --system ~/.gitconfig file - specific to the user git config --global .git/config in the specific repository each level overrides values in the previous level check your settings using git config --list or git config <specific key> to get help even offline use git help <verb> or git <verb> --help e.g. git help config","title":"Installation, setup &amp; getting help"},{"location":"part1/","text":"Version control with Git by Martin Hronec What is a version control version control is a method for tracking changes to source code from Wikipedia: \"the management of changes to documents, computer programs, large web sites, and other collections of information.\" it enables effective collaboration who wrote this part of code? when was this part of code last edited? why/when did it all stop working? where do we see version control? What is Git ? in XKCD words: we will try to do it differently! understanding \" instead of just memorizing we will approach Git bottom-up, i.e. starting with it's data model learning Git top-down (starting with its interface / command-line interface) can lead to a lot of confusion Git a revision control system, a program to manage your source code history standard for version control can be used for: small projects with one developer huge projects with thousands of contributors * e.g. working remotely by hosting a code on public servers like GitHub, GitLab, etc. a free open source system available on Unix based platforms, Windows and macOS has a distributed architecture each person contributing to a repository has full copy of the repository majority of state-of-the-art software projects are under Git! explore directly on GitHub here stable-diffusion Python's pandas tensorflow editor Visual Studio Code kubernetes and much more! note: what is GitHub? provides hosting for software development and version control using Git from an youtube comment on one of the Git tutorials: >Git is related to Github the same way porn is related to Pornhub. created in 2005 by Linus Torvalds to help manage the task of developing the Linux kernel ( a cool Git origin story ) Git installation & setup follow instructions Command line interface a shell is a user interface for access to an operating system's services it is named a shell because it is the outermost layer around the operating system shells use command-line interface (CLI) commands (and syntax) knowledge necessery shell-specific scripting language (like bash) bash is a popular default shell on Linux and macOS bash is an acronym for Bourne Again Shell graphical user interface (GUI) easy-to-use with certain disadvantages at its core, Git is a set of command line utility programs that are designed to execute on a Unix style command-line environment operating systems like Linux and macOX both include built-in Unix command line terminals Git bash is an application for Microsoft Windows environments which provides an emulation layer for a Git command line experience Git Bash is a package that installs Bash, some common bash utilities and Git on a Windows machine it has the same operations as a standard Bash experience Git bash comes included as part of the Git for Windows package Bash basics echo returns whatever you type at the shell prompt pwd prints the current working directory the current working directory is the default place where the shell commands will look for data files the UNIX file hierarchy has a tree structure to reach a particular folder or file, we need to traverse certain paths within this tree structure paths separate every node of the above structure with the help of a slash character - / ls <directory> to list contents of a directory ls <directory> -a to list all hidden files cd <directory> changes the active directory to the path specified cd .. changes to the parent directory cd changes to the HOME directory mkdir creates a folder touch creates an empty file rm delete a file rm -r * deletes a folder with all its contents the redirection operator > will redirect the normal output initially intended to be on stdout and print it directly into the file. echo \"Git is awesome.\" > file.txt cat reads a file and outputs its content Git's data model version control is a method for tracking changes to source code modelling history of a collection of files and folders within some top-level directory through relating snapshots to be a Git repository, we need objects and system for naming those objects refs is the system for naming those objects a history is a directed acyclic graph (DAG) of snapshots each snapshot refers to a set of \"parents (previous snapshots) why set of \"parent\" snapshots instead of just one \"parent\" snapshot? in Git's terms: these snapshots are called commits a file is called a blob (a bunch of bytes) a directory is called a tree maps names to blobs or trees (directories can contain other directories) a \"snapshot\" is basically the top-level tree in your project ASCII art for pedagogical purposes: root_folder (tree) | +- folder (tree) | | | + file.txt (blob, contents = \"A barber learns to shave by shaving fools.\") | +- another_file.txt (blob, contents = \"I don't give a git.\")","title":"Home"},{"location":"part1/#version-control-with-git","text":"by Martin Hronec","title":"Version control with Git"},{"location":"part1/#what-is-a-version-control","text":"version control is a method for tracking changes to source code from Wikipedia: \"the management of changes to documents, computer programs, large web sites, and other collections of information.\" it enables effective collaboration who wrote this part of code? when was this part of code last edited? why/when did it all stop working? where do we see version control?","title":"What is a version control"},{"location":"part1/#what-is-git","text":"in XKCD words: we will try to do it differently! understanding \" instead of just memorizing we will approach Git bottom-up, i.e. starting with it's data model learning Git top-down (starting with its interface / command-line interface) can lead to a lot of confusion","title":"What is Git?"},{"location":"part1/#git","text":"a revision control system, a program to manage your source code history standard for version control can be used for: small projects with one developer huge projects with thousands of contributors * e.g. working remotely by hosting a code on public servers like GitHub, GitLab, etc. a free open source system available on Unix based platforms, Windows and macOS has a distributed architecture each person contributing to a repository has full copy of the repository majority of state-of-the-art software projects are under Git! explore directly on GitHub here stable-diffusion Python's pandas tensorflow editor Visual Studio Code kubernetes and much more! note: what is GitHub? provides hosting for software development and version control using Git from an youtube comment on one of the Git tutorials: >Git is related to Github the same way porn is related to Pornhub. created in 2005 by Linus Torvalds to help manage the task of developing the Linux kernel ( a cool Git origin story )","title":"Git"},{"location":"part1/#git-installation-setup","text":"follow instructions","title":"Git installation &amp; setup"},{"location":"part1/#command-line-interface","text":"a shell is a user interface for access to an operating system's services it is named a shell because it is the outermost layer around the operating system shells use command-line interface (CLI) commands (and syntax) knowledge necessery shell-specific scripting language (like bash) bash is a popular default shell on Linux and macOS bash is an acronym for Bourne Again Shell graphical user interface (GUI) easy-to-use with certain disadvantages at its core, Git is a set of command line utility programs that are designed to execute on a Unix style command-line environment operating systems like Linux and macOX both include built-in Unix command line terminals Git bash is an application for Microsoft Windows environments which provides an emulation layer for a Git command line experience Git Bash is a package that installs Bash, some common bash utilities and Git on a Windows machine it has the same operations as a standard Bash experience Git bash comes included as part of the Git for Windows package","title":"Command line interface"},{"location":"part1/#bash-basics","text":"echo returns whatever you type at the shell prompt pwd prints the current working directory the current working directory is the default place where the shell commands will look for data files the UNIX file hierarchy has a tree structure to reach a particular folder or file, we need to traverse certain paths within this tree structure paths separate every node of the above structure with the help of a slash character - / ls <directory> to list contents of a directory ls <directory> -a to list all hidden files cd <directory> changes the active directory to the path specified cd .. changes to the parent directory cd changes to the HOME directory mkdir creates a folder touch creates an empty file rm delete a file rm -r * deletes a folder with all its contents the redirection operator > will redirect the normal output initially intended to be on stdout and print it directly into the file. echo \"Git is awesome.\" > file.txt cat reads a file and outputs its content","title":"Bash basics"},{"location":"part1/#gits-data-model","text":"version control is a method for tracking changes to source code modelling history of a collection of files and folders within some top-level directory through relating snapshots to be a Git repository, we need objects and system for naming those objects refs is the system for naming those objects a history is a directed acyclic graph (DAG) of snapshots each snapshot refers to a set of \"parents (previous snapshots) why set of \"parent\" snapshots instead of just one \"parent\" snapshot? in Git's terms: these snapshots are called commits a file is called a blob (a bunch of bytes) a directory is called a tree maps names to blobs or trees (directories can contain other directories) a \"snapshot\" is basically the top-level tree in your project ASCII art for pedagogical purposes: root_folder (tree) | +- folder (tree) | | | + file.txt (blob, contents = \"A barber learns to shave by shaving fools.\") | +- another_file.txt (blob, contents = \"I don't give a git.\")","title":"Git's data model"}]}